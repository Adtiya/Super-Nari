
import requests
import subprocess
import traceback
from datetime import datetime

LOG_FILE = "super_nari_test_log.txt"

def log(message):
    with open(LOG_FILE, "a") as f:
        f.write(f"[{datetime.now()}] {message}\n")

def test_backend_api():
    try:
        log("Testing /agent/run...")
        res = requests.post("http://localhost:8000/agent/run", json={
            "user": "test_user",
            "project": "test_project",
            "feature": "test feature from script",
            "agents": ["planner", "dev", "test"],
            "methodology": "agile",
            "target": "python",
            "input_mode": "story"
        })
        assert res.status_code == 200, "Failed /agent/run"
        log("‚úÖ /agent/run passed")
    except Exception as e:
        log(f"‚ùå /agent/run failed: {e}")
        log(traceback.format_exc())

    try:
        log("Testing /memory/save...")
        res = requests.post("http://localhost:8000/memory/save", json={
            "project": "test_project",
            "feature": "test feature from script",
            "plan": "Sample plan",
            "code": "print('Hello')",
            "test": "assert True",
            "notes": "Generated by test script"
        })
        assert res.status_code == 200, "Failed /memory/save"
        log("‚úÖ /memory/save passed")
    except Exception as e:
        log(f"‚ùå /memory/save failed: {e}")
        log(traceback.format_exc())

    try:
        log("Testing /memory/test_project fetch...")
        res = requests.get("http://localhost:8000/memory/test_project")
        assert res.status_code == 200, "Failed /memory/test_project"
        log("‚úÖ /memory/test_project fetch passed")
    except Exception as e:
        log(f"‚ùå /memory/test_project fetch failed: {e}")
        log(traceback.format_exc())

def test_runtime_env():
    try:
        log("Checking Python version...")
        result = subprocess.run(["python", "--version"], capture_output=True, text=True)
        log("‚úÖ Python: " + result.stdout.strip())
    except Exception as e:
        log(f"‚ùå Python check failed: {e}")

    for lang in ["node", "go", "java"]:
        try:
            result = subprocess.run([lang, "--version"], capture_output=True, text=True)
            assert result.returncode == 0
            log(f"‚úÖ {lang.capitalize()}: " + result.stdout.strip())
        except Exception as e:
            log(f"‚ùå {lang} runtime check failed: {e}")

def run_all_tests():
    log("üöÄ Starting Super NARI agent system test suite...")
    test_backend_api()
    test_runtime_env()
    log("üèÅ Test suite complete.")

if __name__ == "__main__":
    run_all_tests()

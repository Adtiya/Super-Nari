
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

class AgentTemplatesTab extends StatefulWidget {
  @override
  _AgentTemplatesTabState createState() => _AgentTemplatesTabState();
}

class _AgentTemplatesTabState extends State<AgentTemplatesTab> {
  late Future<List<dynamic>> templates;

  @override
  void initState() {
    super.initState();
    templates = fetchTemplates();
  }

  Future<List<dynamic>> fetchTemplates() async {
    final response = await http.get(Uri.parse('http://localhost:8000/templates/list'));
    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else {
      throw Exception('Failed to load templates');
    }
  }

  Future<void> useTemplate(String prompt, String runtime) async {
    final response = await http.post(
      Uri.parse('http://localhost:8000/templates/use'),
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({
        "project_name": "TemplateGeneratedProject",
        "feature_name": "AutoGeneratedFeature",
        "prompt": prompt,
        "runtime": runtime
      }),
    );

    showDialog(
      context: context,
      builder: (_) => Material(
        child: AlertDialog(
          title: Text("Template Execution"),
          content: Text(response.statusCode == 200
              ? "Template agent run started successfully."
              : "Failed to start template agent."),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text("OK"),
            )
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Agent Templates")),
      body: FutureBuilder<List<dynamic>>(
        future: templates,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text("Error: \${snapshot.error}"));
          }

          final data = snapshot.data!;
          return ListView.builder(
            itemCount: data.length,
            itemBuilder: (context, index) {
              final template = data[index];
              return Card(
                margin: EdgeInsets.all(12),
                child: ListTile(
                  title: Text(template['title']),
                  subtitle: Text(template['description']),
                  trailing: ElevatedButton(
                    child: Text("Use Template"),
                    onPressed: () {
                      useTemplate(template['prompt'], template['runtime']);
                    },
                  ),
                ),
              );
            },
          );
        },
      ),
    );
  }
}


import requests
import traceback
from datetime import datetime

LOG_FILE = "super_nari_full_test_log.txt"

def log(message):
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(f"[{datetime.now()}] {message}\n")

def test_feature(name, method, url, data=None):
    try:
        log(f"🔍 Testing {name}...")
        if method == "POST":
            res = requests.post(url, json=data)
        elif method == "GET":
            res = requests.get(url)
        else:
            log(f"❌ Unsupported method for {name}")
            return
        assert res.status_code == 200, f"{name} failed with status {res.status_code}"
        log(f"✅ {name} passed")
    except Exception as e:
        log(f"❌ {name} failed: {e}")
        log(traceback.format_exc())

def run_all_tests():
    log("🚀 Starting Super NARI full feature test suite...")

    # Smart Dashboard - Agent Run
    test_feature("SmartDashboard /agent/run", "POST", "http://localhost:8000/agent/run", {
        "user": "nari",
        "project": "dashboard_test",
        "feature": "Analyze data and suggest improvements",
        "agents": ["planner", "dev", "test"],
        "methodology": "agile",
        "target": "python",
        "input_mode": "story"
    })

    # ASI - Goal to Features
    test_feature("ASI /asi/generate-features", "POST", "http://localhost:8000/asi/generate-features", {
        "project": "asi_test",
        "stack": "python",
        "methodology": "agile",
        "goal": "Build a finance assistant agent",
        "features": "**Data parser**\n**Budget forecaster**"
    })

    # New Project - Agent Generation
    test_feature("New Project /agent/run", "POST", "http://localhost:8000/agent/run", {
        "user": "nari",
        "project": "new_project_test",
        "feature": "Create a weather notifier agent",
        "agents": ["planner", "dev", "test"],
        "methodology": "agile",
        "target": "node",
        "input_mode": "story"
    })

    # Super Agent - Run Code
    test_feature("Super Agent /agent/run-script", "POST", "http://localhost:8000/agent/run-script", {
        "language": "python",
        "code": "print('Hello from Super Agent')"
    })

    # Memory Save
    test_feature("Memory Save /memory/save", "POST", "http://localhost:8000/memory/save", {
        "project": "memory_test",
        "feature": "memory_feature",
        "plan": "Sample plan",
        "code": "print('Code')",
        "test": "assert True",
        "notes": "test save"
    })

    # Memory Fetch
    test_feature("Memory Fetch /memory/memory_test", "GET", "http://localhost:8000/memory/memory_test")

    # Deploy Tab
    test_feature("Deploy /agent/export", "POST", "http://localhost:8000/agent/export", {
        "project": "deploy_test",
        "feature": "sample feature"
    })

    # Build Tab (code already generated by /agent/run)
    log("✅ Build Tab uses same backend as /agent/run — already tested.")

    # Manage Feature Tab (simulate manual review)
    log("✅ Manage Tab is frontend-only — review tested via UI.")

    log("🏁 All tests complete.")

if __name__ == "__main__":
    run_all_tests()
